;# this is a part of TVP (KIRIKIRI) software source.
;# see other sources for license.
;# (C)2001-2009 W.Dee <dee@kikyou.info> and contributors


;# make tvpgl_ia32.c and tvpgl_ia32.h from *.nah, *.nas.

open FH, ">tvpgl_ia32_intf_.h";
open FC, ">tvpgl_ia32_intf_.c";

$c_emits = '';

sub process
{
	local($fn) = @_;

	open FA , $fn;
	@all = <FA>;
	$all = join('', @all);

	while($all =~ /;;\[emit_c_h\](.*?)\n/sg)
	{
		print FH "$1\n";
	}

	;# equ conversion
	print FH "/*[*/\n";
	while($all =~ /;;\[emit_c_h_equ_begin\](.*?);;\[emit_c_h_equ_end\]/sg)
	{
		@each = split(/\n/, $1);
		foreach $each(@each)
		{
			if($each =~ /(.*?)\s+equ\s+(.*)/)
			{
				$name = $1;
				$value = $2;
				if($value =~ /(\d.*?)[hH]/)
				{
					$value = "0x$1";
				}
				print FH "#define $name $value\n";
			}
		}
	}
	print FH "/*]*/\n";


	while($all =~ /;;\[function\](.*?)\n/sg)
	{
		print FH "TVP_GL_IA32_FUNC_EXTERN_DECL($1);\n";
	}

	while($all =~ /;;\[function_replace_by\s+(.*?)\](.*?)\n;;(.*?),(.*?),(.*?)\n/sg)
	{
		print FH "TVP_GL_IA32_FUNC_EXTERN_DECL($3, $4, $5);\n";

		print FC "if($1)\n\t" if($1 ne '1');
		print FC "$2 = $4;\n";
	}

	while($all =~ /;;\[emit_c_c\](.*?)\n/sg)
	{
		$c_emits .= $1."\n";
	}

}



print FH <<EOF;
/*
	this is a part of TVP (KIRIKIRI) software source.
	see other sources for license.
	(C)2001-2009 W.Dee <dee\@kikyou.info> and contributors
*/

/* C-language interface to tvpgl_ia32.lib */
/* this file is always generated by summary.pl */

#ifndef __TVPGL_IA32_H__
#define __TVPGL_IA32_H__


#include "tjsTypes.h"
#include "tvpgl.h"

#ifdef _WIN32
#define TVP_GL_IA32_FUNC_DECL(rettype, funcname, arg)  rettype __cdecl funcname arg
#define TVP_GL_IA32_FUNC_EXTERN_DECL(rettype, funcname, arg)  extern rettype __cdecl funcname arg
#define TVP_GL_IA32_FUNC_PTR_DECL(rettype, funcname, arg) rettype __cdecl (*funcname) arg
#define TVP_GL_IA32_FUNC_PTR_EXTERN_DECL(rettype, funcname, arg) extern rettype __cdecl (*funcname) arg
#endif

#ifdef __cplusplus
 extern "C" {
#endif

extern void TVPGL_IA32_Init();

/*[*/
//---------------------------------------------------------------------------
// CPU Types
//---------------------------------------------------------------------------
/*]*/
/*[*/
#define TVP_CPU_HAS_FPU 0x000010000
#define TVP_CPU_HAS_MMX 0x000020000
#define TVP_CPU_HAS_3DN 0x000040000
#define TVP_CPU_HAS_SSE 0x000080000
#define TVP_CPU_HAS_CMOV 0x000100000
#define TVP_CPU_HAS_E3DN 0x000200000
#define TVP_CPU_HAS_EMMX 0x000400000
#define TVP_CPU_HAS_SSE2 0x000800000
#define TVP_CPU_HAS_TSC 0x001000000
#define TVP_CPU_HAS_SSE3  0x002000000
#define TVP_CPU_HAS_SSSE3 0x004000000
#define TVP_CPU_HAS_SSE41 0x008000000
#define TVP_CPU_HAS_SSE42 0x010000000
#define TVP_CPU_HAS_SSE4a 0x020000000
#define TVP_CPU_HAS_AVX   0x040000000
#define TVP_CPU_HAS_AVX2  0x080000000
#define TVP_CPU_HAS_FMA3  0x00001000
#define TVP_CPU_HAS_AES   0x00002000
#define TVP_CPU_FEATURE_MASK 0x0fffff000
#define TVP_CPU_IS_INTEL 0x000000010
#define TVP_CPU_IS_AMD 0x000000020
#define TVP_CPU_IS_IDT 0x000000030
#define TVP_CPU_IS_CYRIX 0x000000040
#define TVP_CPU_IS_NEXGEN 0x000000050
#define TVP_CPU_IS_RISE 0x000000060
#define TVP_CPU_IS_UMC 0x000000070
#define TVP_CPU_IS_TRANSMETA 0x000000080
#define TVP_CPU_IS_NSC 0x000000100
#define TVP_CPU_IS_COMPAQ 0x000000200
#define TVP_CPU_IS_UNKNOWN 0x000000000
#define TVP_CPU_VENDOR_MASK 0x000000ff0
#define TVP_CPU_FAMILY_MASK 0x00000000f
/*]*/

EOF

print FC <<EOF;
/*
	this is a part of TVP (KIRIKIRI) software source.
	see other sources for license.
	(C)2001-2009 W.Dee <dee\@kikyou.info> and contributors
*/

/* C-language interface to tvpgl_ia32.lib */
/* this file is always generated by summary.pl */

#include "tjsTypes.h"

#include "tvpgl.h"
#include "tvpgl_ia32_intf.h"

extern tjs_uint32 TVPCPUType;

void TVPGL_IA32_Init()
{


EOF


@files = <*.nah>;
foreach $file(@files)
{
	process($file);
}


@files = <*.nas>;
foreach $file(@files)
{
	process($file);
}



print FH <<EOF;

#ifdef __cplusplus
 }
#endif


#endif
EOF

print FC <<EOF

}


$c_emits

EOF


